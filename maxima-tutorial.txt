                       A Way To Use MAXIMA Lispy

If someone asks what is the use of Common Lisp, a good answer is MAXIMA.
MAXIMA is a great and old computer algebra system, with ALGOL syntax and LISP
semantics. The syntax close to traditional mathematics is user friendly, but
painful from the perspective of a lisp user accustomed to the superior REPL.
There are not fancy editor extensions: describe, inspect, find definitions,
find references, trace, macroexpand, et cetera, as in SLIME. And above all,
there are not PARENTHESES seamlessly to compose with the CL itself and other
CL library and application.

How to use MAXIMA lispy? Look at the source, we can find some clues. There is 
maxima.asd in source tree, then:

CL-USER> (asdf:load-system :maxima) ;configure your asdf to find maxima, if
				    ;you can not load because of some
                                    ;compiling errors about type, then
	                            ;(setf asdf:*compile-file-failure-behaviour*
                                    ;      :warn)
                                    :note: as commit 87c917c3 (Oct 16 2022,
                                    ; Robert Smith), this problem seems to
                                    ;be solved.

The function entering maxima repl is CL-USER::RUN. Then M-. RUN (slime-edit
-definition in GNU EMACS, find-definitions in LEM), we see the key function
is MACSYMA-TOP-LEVEL. Following it, we find MREAD, MEVAL*, DISPLA the maxima
repl. Then we write a translation function that translates MAXIMA/MACSYMA
form to LISP form:

CL-USER> (in-package :maxima)

MAXIMA> (defun lisp-form (macsyma-string)
	  (macsyma-read-string (concatenate 'string macsyma-string "$")))

try:

MAXIMA> (lisp-form "diff(sin(x),x)")
(($DIFF) ((%SIN) $X) $X)

MAXIMA> (lisp-form "integrate(cos(x),x)")
(($INTEGRATE) ((%COS) $X) $X)

MAXIMA> (lisp-form "taylor(asin(x),x,0,6)")
(($TAYLOR) ((%ASIN) $X) $X 0 6)

MAXIMA> (lisp-form "solve(x^2=-1)")
(($SOLVE) ((MEQUAL) ((MEXPT) $X 2) ((MMINUS) 1)))

MAXIMA> (lisp-form "limit(sin(x)/x,x,0)")
(($LIMIT) ((MQUOTIENT) ((%SIN) $X) $X) $X 0)

MAXIMA> (lisp-form "desolve('diff(f(x),x)=f(x),f(x))")
(($DESOLVE) ((MEQUAL) ((%DERIVATIVE) (($F) $X) $X) (($F) $X)) (($F) $X))

MAXIMA> (lisp-form "matrix([1,0],[0,1])")
(($MATRIX) ((MLIST) 1 0) ((MLIST) 0 1))

MAXIMA> (lisp-form "determinant(matrix([1,0],[0,1]))")
(($DETERMINANT) (($MATRIX) ((MLIST) 1 0) ((MLIST) 0 1)))

MAXIMA> (lisp-form "factor(x^3+1)")
(($FACTOR) ((MPLUS) ((MEXPT) $X 3) 1))

...

Some patterns are emerging!

MAXIMA> (meval* '(($DIFF) ((%SIN) $X) $X))
((%COS SIMP) $X)

MAXIMA> (displa *)
cos(x)
NIL

MAXIMA> (meval* '(($INTEGRATE) ((%COS) $X) $X))
((%SIN SIMP) $X)

MAXIMA> (displa *)
sin(x)
NIL

We also can directly do:

MAXIMA> ($diff '((%sin) $x) '$x)
((%COS SIMP) $X)

MAXIMA> ($integrate '((%cos) $x) '$x)
((%SIN SIMP) $X)

$DIFF, $INTEGRATE are functions. But:

MAXIMA> (lisp-form "sin(10d0)")
((%SIN) 10.0)

MAXIMA> (lisp-form "gamma(10d0)")
((%GAMMA) 10.0)

%SIN, %GAMMA are only symbols. C-c C-d d %SIN (slime-describe-symbol in GNU
EMACS, lisp-describe-symbol in LEM), you will see that it has a big and
beautiful property list with many hints. (If you can not see the complete
plist, that is not the fault of the Editor or SWANK, it is the behavior of
SBCL's (defmethod describe-object ((symbol symbol) stream) ...) in src/code/
describe.lisp. Change the (prin1-to-line key :columns 2 :reserve 5) to key,
and (prin1-to-line value :columns 2 :reserve 5) to value. Then C-c C-c the
method (slime-compile-defun in GNU EMACS, lisp-compile-defun in LEM). Don't be
fearful to change the SBCL itself. C'est la vie.

The results of (meval* '((%sin) 10.0)) and ($sin 10.0) are the same.

Also, more simple:

MAXIMA> (lisp-form "x+y")
((MPLUS) $X $Y)
MAXIMA> (lisp-form "x-y")
((MPLUS) $X ((MMINUS) $Y))
MAXIMA> (lisp-form "x*y")
((MTIMES) $X $Y)
MAXIMA> (lisp-form "x/y")
((MQUOTIENT) $X $Y)
MAXIMA> (lisp-form "x^y")
((MEXPT) $X $Y)
MAXIMA> (lisp-form "x**y")
((MEXPT) $X $Y)
MAXIMA> (lisp-form "x.y")
((MNCTIMES) $X $Y)
MAXIMA> (lisp-form "x^^y")
((MNCEXPT) $X $Y)

Trial and error, the patterns become clearer, noticed the $, M, %?
Still remember LIST and SYMBOL are two most important data structures in LISP?


MAXIMA> (loop :for x := 0.1d0 :then (incf x 0.1d0)
              :repeat 44
              :collect x
              :collect (meval* (list '(%gamma) x)))
(0.1d0 9.513507698668723d0 0.2d0 4.590843711998804d0 0.30000000000000004d0
...)

Put these data into lisp GUI such as GARNET, CLIM, CLOG, you can get a 
function plot.

Try further:

MAXIMA> (lisp-form "a:1")
((MSETQ) $A 1)

MAXIMA> (lisp-form "f(x):=sin(x)")
((MDEFINE) (($F) $X) ((%SIN) $X))

MAXIMA> (lisp-form "fact(n):=if n<=1 then 1 else n*fact(n-1)")
((MDEFINE) (($FACT) $N)
 ((MCOND) ((MLEQP) $N 1) 1 T ((MTIMES) $N (($FACT) ((MPLUS) $N ((MMINUS) 1))))))

MAXIMA> (lisp-form "when(test,body)::= buildq([test,body],if test then body)")
((MDEFMACRO) (($WHEN) $TEST $BODY)
 (($BUILDQ) ((MLIST) $TEST $BODY) ((MCOND) $TEST $BODY T $FALSE)))

After meval* them, then:

MAXIMA> $a
1

MAXIMA> (meval* '(($f) 1.0d0))
0.8414709848078965

MAXIMA> (meval* '(($fact) 10))
3628800

MAXIMA> (lisp-form "macroexpand(when(display2d=true, disp(taylor(f(x),x,0,5))))") 
(($MACROEXPAND) (($WHEN) ((MEQUAL) $DISPLAY2D T) (($DISP) (($TAYLOR) (($F) $X) $X 0 5))))

MAXIMA> (meval* *)
((MCOND SIMP) ((MEQUAL SIMP) $DISPLAY2D T)
 (($DISP SIMP) (($TAYLOR SIMP) (($F SIMP) $X) $X 0 5)) T $FALSE)

MAXIMA> (meval* *)
                                  3    5
                                 x    x
                             x - -- + --- + . . .
                                 6    120

Observe the changes of symbol-plist of $F, $FACT, $WHEN. (meval* '(($kill) $all))
will remove these new properties, and unbind $a.

Following the instruction of INSTALL.lisp, set some path variables
(src/autoconf-variables.lisp), load lisp-utils/defsystem, lisp-utils/make-depends,
we can do:

MAXIMA> ($load "itensor")

MAXIMA> (lisp-form "imetric(g)")
(($IMETRIC) $G)
MAXIMA> (meval* *)
$DONE
MAXIMA> (lisp-form "ishow(g([],[j,k])*g([],[i,l])*a([i,j],[]))")
(($ISHOW)
 ((MTIMES) (($G) ((MLIST)) ((MLIST) $J $K)) (($G) ((MLIST)) ((MLIST) $I $L))
  (($A) ((MLIST) $I $J) ((MLIST)))))
MAXIMA> (meval* *)
                                 i l  j k
(%t0)                           g    g    a
                                           i j
((MTIMES SIMP) (($G SIMP) ((MLIST SIMP)) ((MLIST SIMP) $I $L))
 (($G SIMP) ((MLIST SIMP)) ((MLIST SIMP) $J $K))
 (($A SIMP) ((MLIST SIMP) $I $J) ((MLIST SIMP))))

Another example:

MAXIMA> ($load "lapack")

Believe it or not, you got a LAPACK completely written in LISP. Throw away FFI.
Try DGEEV subroutine:

MAXIMA> (defun dgeev (array) ;array is one dimensional, column-major ordered.
          (let* ((n (isqrt (length array)))
                 (a array)
                 (wr (make-array n :element-type 'double-float))
                 (wi (make-array n :element-type 'double-float))
                 (vl (make-array (* n n) :element-type 'double-float))
                 (vr (make-array (* n n) :element-type 'double-float)))
            (lapack:dgeev "V"
                          "V"
                          n a n wr wi vl n vr n wr -1 0)
            (let* ((lwork (truncate (aref wr 0)))
                   (work (make-array lwork :element-type 'double-float)))
              (lapack:dgeev "V"
                            "V"
                            n a n wr wi vl n vr n work lwork 0)
              (alexandria:plist-alist (list :wr wr :wi wi :vl vl :vr vr)))))        
DGEEV

MAXIMA> (defparameter *ckm-matrix* ;Cabibbo–Kobayashi–Maskawa matrix
          '(($matrix) ;matrix is row-major ordered
            ((mlist) 0.9737 0.2245 0.00382)
            ((mlist) 0.221 0.987 0.041)
            ((mlist) 0.008 0.0388 1.013)))
*CKM-MATRIX*

MAXIMA> (lapack-lispify-matrix *ckm-matrix* 3 3)
#(0.9737 0.221 0.008 0.2245 0.987 0.0388 0.00382 0.041 1.013)

MAXIMA> (dgeev *)
((:WR . #(0.7553580041276908 1.208707650167535 1.0096343457047745))
 (:WI . #(0.0 0.0 0.0))
 (:VL
  . #(0.999782808989227 0.0061346732680669525 0.019917345041569934 0.0
      0.9999861392655204 0.005265099888812207 0.0 0.0 1.0))
 (:VR
  . #(1.0 0.0 0.0 -0.0061358904446058475 0.9999811752470401 0.0 -0.019885156381280553
      -0.005264058824451628 0.9997884127356071)))

MAXIMA> (defparameter *ckm* *)
;omit value

From $dgeev (M-. $dgeev) extract functions make-eigval and make-eigvec.
Transform *ckm* LISP value to MACSYMA LISP form:

MAXIMA> (make-eigval (alexandria:assoc-value *ckm* :wr)
                     (alexandria:assoc-value *ckm* :wi))
((MLIST) 0.7553580041276908 1.208707650167535 1.0096343457047745)

MAXIMA> (make-eigvec 3
                     (alexandria:assoc-value *ckm* :vr)
                     (alexandria:assoc-value *ckm* :wi))
(($MATRIX) ((MLIST) 0.7137187046810191 -0.6822653742636046 -0.18682163050743134)
 ((MLIST) -0.6955467378513901 -0.711324435697427 -0.04660059273149587)
 ((MLIST) 0.08258538643572384 -0.1689127178772533 0.9812879613709822))

MAXIMA> (defparameter *ckm-eigval* **) ;eigenvalues
;omit value

MAXIMA> (defparameter *ckm-eigvec* **) ;eigenvectors
;omit value

MAXIMA> (meval* (list '(mnctimes) ;*ckm-matrix* times first eigenvector
                      *ckm-matrix*
                      ($col *ckm-eigvec* 1)))
(($MATRIX SIMP) ((MLIST SIMP) 0.5391131362764556) ((MLIST SIMP) -0.5253867956809521)
 ((MLIST SIMP) 0.06238153266820247))

MAXIMA> (meval* (list '(mtimes) ;first eigenvalue times first eigenvector
                      ($first *ckm-eigval*)
                      ($col *ckm-eigvec* 1)))
(($MATRIX SIMP) ((MLIST SIMP) 0.5391131362764553) ((MLIST SIMP) -0.5253867956809523)
 ((MLIST SIMP) 0.062381532668202434))

These two matrices are equal approximated.

More complex things can be done with some efforts.

If someone asks what is the difference of a program with the same function
and performance written in Common Lisp and other programming languages,
a good answer is A Playful Game.
